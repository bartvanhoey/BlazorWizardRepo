@using System.ComponentModel.DataAnnotations
<h3>Credentials</h3>

<EditForm EditContext="_editContext" >
    <DataAnnotationsValidator/>

    <div class="mb-3">
        <label class="form-label" for="username">Username (Email)</label>
        <InputText class="form-control" id="username" @bind-Value="_credentials.Username"/>
    </div>

    <div class="mb-3">
        <label class="form-label" for="password">Password</label>
        <InputText class="form-control" type="password" id="password" @bind-Value="_credentials.Password"/>
    </div>

    <div class="mb-3">
        <label class="form-label" for="confirmPassword">Confirm Password</label>
        <InputText class="form-control" type="password" id="confirmPassword" @bind-Value="_credentials.ConfirmPassword"/>
    </div>

</EditForm>

@code {
    [Parameter] public EventCallback<CredentialEntryResult> OnCredentialsEntered { get; set; }
    [Parameter] public bool IsCredentialsEntryValid { get; set; }
    private EditContext? _editContext;
    private Credentials _credentials = new();

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_credentials);
        _editContext.OnFieldChanged += EditContextOnOnFieldChanged;
    }
    
    private void EditContextOnOnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        var isValid = _editContext != null && _editContext.Validate();
        OnCredentialsEntered.InvokeAsync(new CredentialEntryResult(_credentials.Username, _credentials.Password, isValid));
    }

    
    
    public class Credentials
    {
        [Required] [EmailAddress] public string? Username { get; set; }

        [Required] [MinLength(6)] public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string? ConfirmPassword { get; set; }
    }

}



